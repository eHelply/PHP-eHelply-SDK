<?php
/**
 * PlacesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eHelply SDK - 1.1.89
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.89
 * Contact: support@ehelply.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PlacesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlacesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPlacePlacesPlacesPost
     *
     * Create Place
     *
     * @param  \OpenAPI\Client\Model\PlaceBase $place_base place_base (required)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlaceResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function createPlacePlacesPlacesPost($place_base, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->createPlacePlacesPlacesPostWithHttpInfo($place_base, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation createPlacePlacesPlacesPostWithHttpInfo
     *
     * Create Place
     *
     * @param  \OpenAPI\Client\Model\PlaceBase $place_base (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlaceResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPlacePlacesPlacesPostWithHttpInfo($place_base, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->createPlacePlacesPlacesPostRequest($place_base, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PlaceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlaceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlaceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PlaceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPlacePlacesPlacesPostAsync
     *
     * Create Place
     *
     * @param  \OpenAPI\Client\Model\PlaceBase $place_base (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlacePlacesPlacesPostAsync($place_base, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->createPlacePlacesPlacesPostAsyncWithHttpInfo($place_base, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPlacePlacesPlacesPostAsyncWithHttpInfo
     *
     * Create Place
     *
     * @param  \OpenAPI\Client\Model\PlaceBase $place_base (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlacePlacesPlacesPostAsyncWithHttpInfo($place_base, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\PlaceResponse';
        $request = $this->createPlacePlacesPlacesPostRequest($place_base, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPlacePlacesPlacesPost'
     *
     * @param  \OpenAPI\Client\Model\PlaceBase $place_base (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPlacePlacesPlacesPostRequest($place_base, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        // verify the required parameter 'place_base' is set
        if ($place_base === null || (is_array($place_base) && count($place_base) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $place_base when calling createPlacePlacesPlacesPost'
            );
        }

        $resourcePath = '/places/places';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($place_base)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($place_base));
            } else {
                $httpBody = $place_base;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePlacePlacesPlacesPlaceUuidDelete
     *
     * Delete Place
     *
     * @param  string $place_uuid place_uuid (required)
     * @param  bool $soft_delete soft_delete (optional, default to true)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function deletePlacePlacesPlacesPlaceUuidDelete($place_uuid, $soft_delete = true, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->deletePlacePlacesPlacesPlaceUuidDeleteWithHttpInfo($place_uuid, $soft_delete, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation deletePlacePlacesPlacesPlaceUuidDeleteWithHttpInfo
     *
     * Delete Place
     *
     * @param  string $place_uuid (required)
     * @param  bool $soft_delete (optional, default to true)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePlacePlacesPlacesPlaceUuidDeleteWithHttpInfo($place_uuid, $soft_delete = true, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->deletePlacePlacesPlacesPlaceUuidDeleteRequest($place_uuid, $soft_delete, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePlacePlacesPlacesPlaceUuidDeleteAsync
     *
     * Delete Place
     *
     * @param  string $place_uuid (required)
     * @param  bool $soft_delete (optional, default to true)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePlacePlacesPlacesPlaceUuidDeleteAsync($place_uuid, $soft_delete = true, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->deletePlacePlacesPlacesPlaceUuidDeleteAsyncWithHttpInfo($place_uuid, $soft_delete, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePlacePlacesPlacesPlaceUuidDeleteAsyncWithHttpInfo
     *
     * Delete Place
     *
     * @param  string $place_uuid (required)
     * @param  bool $soft_delete (optional, default to true)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePlacePlacesPlacesPlaceUuidDeleteAsyncWithHttpInfo($place_uuid, $soft_delete = true, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = 'mixed';
        $request = $this->deletePlacePlacesPlacesPlaceUuidDeleteRequest($place_uuid, $soft_delete, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePlacePlacesPlacesPlaceUuidDelete'
     *
     * @param  string $place_uuid (required)
     * @param  bool $soft_delete (optional, default to true)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePlacePlacesPlacesPlaceUuidDeleteRequest($place_uuid, $soft_delete = true, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        // verify the required parameter 'place_uuid' is set
        if ($place_uuid === null || (is_array($place_uuid) && count($place_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $place_uuid when calling deletePlacePlacesPlacesPlaceUuidDelete'
            );
        }

        $resourcePath = '/places/places/{place_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $soft_delete,
            'soft_delete', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }

        // path params
        if ($place_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'place_uuid' . '}',
                ObjectSerializer::toPathValue($place_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forwardGeocodingPlacesGeocodingForwardGet
     *
     * Forward Geocoding
     *
     * @param  string $searching_place searching_place (required)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function forwardGeocodingPlacesGeocodingForwardGet($searching_place, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->forwardGeocodingPlacesGeocodingForwardGetWithHttpInfo($searching_place, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation forwardGeocodingPlacesGeocodingForwardGetWithHttpInfo
     *
     * Forward Geocoding
     *
     * @param  string $searching_place (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function forwardGeocodingPlacesGeocodingForwardGetWithHttpInfo($searching_place, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->forwardGeocodingPlacesGeocodingForwardGetRequest($searching_place, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forwardGeocodingPlacesGeocodingForwardGetAsync
     *
     * Forward Geocoding
     *
     * @param  string $searching_place (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forwardGeocodingPlacesGeocodingForwardGetAsync($searching_place, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->forwardGeocodingPlacesGeocodingForwardGetAsyncWithHttpInfo($searching_place, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forwardGeocodingPlacesGeocodingForwardGetAsyncWithHttpInfo
     *
     * Forward Geocoding
     *
     * @param  string $searching_place (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forwardGeocodingPlacesGeocodingForwardGetAsyncWithHttpInfo($searching_place, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = 'mixed';
        $request = $this->forwardGeocodingPlacesGeocodingForwardGetRequest($searching_place, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forwardGeocodingPlacesGeocodingForwardGet'
     *
     * @param  string $searching_place (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function forwardGeocodingPlacesGeocodingForwardGetRequest($searching_place, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        // verify the required parameter 'searching_place' is set
        if ($searching_place === null || (is_array($searching_place) && count($searching_place) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $searching_place when calling forwardGeocodingPlacesGeocodingForwardGet'
            );
        }

        $resourcePath = '/places/geocoding/forward';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searching_place,
            'searching_place', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlacePlacesPlacesPlaceUuidGet
     *
     * Get Place
     *
     * @param  string $place_uuid place_uuid (required)
     * @param  bool $with_meta with_meta (optional, default to false)
     * @param  bool $with_catalog with_catalog (optional, default to false)
     * @param  bool $with_reviews with_reviews (optional, default to false)
     * @param  bool $with_schedule with_schedule (optional, default to false)
     * @param  bool $with_collection with_collection (optional, default to false)
     * @param  bool $with_blog with_blog (optional, default to false)
     * @param  bool $with_tags with_tags (optional, default to false)
     * @param  bool $with_categories with_categories (optional, default to false)
     * @param  bool $with_company with_company (optional, default to false)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlaceResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getPlacePlacesPlacesPlaceUuidGet($place_uuid, $with_meta = false, $with_catalog = false, $with_reviews = false, $with_schedule = false, $with_collection = false, $with_blog = false, $with_tags = false, $with_categories = false, $with_company = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->getPlacePlacesPlacesPlaceUuidGetWithHttpInfo($place_uuid, $with_meta, $with_catalog, $with_reviews, $with_schedule, $with_collection, $with_blog, $with_tags, $with_categories, $with_company, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation getPlacePlacesPlacesPlaceUuidGetWithHttpInfo
     *
     * Get Place
     *
     * @param  string $place_uuid (required)
     * @param  bool $with_meta (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_collection (optional, default to false)
     * @param  bool $with_blog (optional, default to false)
     * @param  bool $with_tags (optional, default to false)
     * @param  bool $with_categories (optional, default to false)
     * @param  bool $with_company (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlaceResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlacePlacesPlacesPlaceUuidGetWithHttpInfo($place_uuid, $with_meta = false, $with_catalog = false, $with_reviews = false, $with_schedule = false, $with_collection = false, $with_blog = false, $with_tags = false, $with_categories = false, $with_company = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->getPlacePlacesPlacesPlaceUuidGetRequest($place_uuid, $with_meta, $with_catalog, $with_reviews, $with_schedule, $with_collection, $with_blog, $with_tags, $with_categories, $with_company, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PlaceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlaceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlaceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PlaceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlacePlacesPlacesPlaceUuidGetAsync
     *
     * Get Place
     *
     * @param  string $place_uuid (required)
     * @param  bool $with_meta (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_collection (optional, default to false)
     * @param  bool $with_blog (optional, default to false)
     * @param  bool $with_tags (optional, default to false)
     * @param  bool $with_categories (optional, default to false)
     * @param  bool $with_company (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlacePlacesPlacesPlaceUuidGetAsync($place_uuid, $with_meta = false, $with_catalog = false, $with_reviews = false, $with_schedule = false, $with_collection = false, $with_blog = false, $with_tags = false, $with_categories = false, $with_company = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->getPlacePlacesPlacesPlaceUuidGetAsyncWithHttpInfo($place_uuid, $with_meta, $with_catalog, $with_reviews, $with_schedule, $with_collection, $with_blog, $with_tags, $with_categories, $with_company, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlacePlacesPlacesPlaceUuidGetAsyncWithHttpInfo
     *
     * Get Place
     *
     * @param  string $place_uuid (required)
     * @param  bool $with_meta (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_collection (optional, default to false)
     * @param  bool $with_blog (optional, default to false)
     * @param  bool $with_tags (optional, default to false)
     * @param  bool $with_categories (optional, default to false)
     * @param  bool $with_company (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlacePlacesPlacesPlaceUuidGetAsyncWithHttpInfo($place_uuid, $with_meta = false, $with_catalog = false, $with_reviews = false, $with_schedule = false, $with_collection = false, $with_blog = false, $with_tags = false, $with_categories = false, $with_company = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\PlaceResponse';
        $request = $this->getPlacePlacesPlacesPlaceUuidGetRequest($place_uuid, $with_meta, $with_catalog, $with_reviews, $with_schedule, $with_collection, $with_blog, $with_tags, $with_categories, $with_company, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlacePlacesPlacesPlaceUuidGet'
     *
     * @param  string $place_uuid (required)
     * @param  bool $with_meta (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_collection (optional, default to false)
     * @param  bool $with_blog (optional, default to false)
     * @param  bool $with_tags (optional, default to false)
     * @param  bool $with_categories (optional, default to false)
     * @param  bool $with_company (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlacePlacesPlacesPlaceUuidGetRequest($place_uuid, $with_meta = false, $with_catalog = false, $with_reviews = false, $with_schedule = false, $with_collection = false, $with_blog = false, $with_tags = false, $with_categories = false, $with_company = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        // verify the required parameter 'place_uuid' is set
        if ($place_uuid === null || (is_array($place_uuid) && count($place_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $place_uuid when calling getPlacePlacesPlacesPlaceUuidGet'
            );
        }

        $resourcePath = '/places/places/{place_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_meta,
            'with_meta', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_catalog,
            'with_catalog', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_reviews,
            'with_reviews', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_schedule,
            'with_schedule', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_collection,
            'with_collection', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_blog,
            'with_blog', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_tags,
            'with_tags', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_categories,
            'with_categories', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_company,
            'with_company', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }

        // path params
        if ($place_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'place_uuid' . '}',
                ObjectSerializer::toPathValue($place_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reverseGeocodingPlacesGeocodingReverseGet
     *
     * Reverse Geocoding
     *
     * @param  float $long long (required)
     * @param  float $lat lat (required)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function reverseGeocodingPlacesGeocodingReverseGet($long, $lat, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->reverseGeocodingPlacesGeocodingReverseGetWithHttpInfo($long, $lat, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation reverseGeocodingPlacesGeocodingReverseGetWithHttpInfo
     *
     * Reverse Geocoding
     *
     * @param  float $long (required)
     * @param  float $lat (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function reverseGeocodingPlacesGeocodingReverseGetWithHttpInfo($long, $lat, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->reverseGeocodingPlacesGeocodingReverseGetRequest($long, $lat, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reverseGeocodingPlacesGeocodingReverseGetAsync
     *
     * Reverse Geocoding
     *
     * @param  float $long (required)
     * @param  float $lat (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reverseGeocodingPlacesGeocodingReverseGetAsync($long, $lat, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->reverseGeocodingPlacesGeocodingReverseGetAsyncWithHttpInfo($long, $lat, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reverseGeocodingPlacesGeocodingReverseGetAsyncWithHttpInfo
     *
     * Reverse Geocoding
     *
     * @param  float $long (required)
     * @param  float $lat (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reverseGeocodingPlacesGeocodingReverseGetAsyncWithHttpInfo($long, $lat, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = 'mixed';
        $request = $this->reverseGeocodingPlacesGeocodingReverseGetRequest($long, $lat, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reverseGeocodingPlacesGeocodingReverseGet'
     *
     * @param  float $long (required)
     * @param  float $lat (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reverseGeocodingPlacesGeocodingReverseGetRequest($long, $lat, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        // verify the required parameter 'long' is set
        if ($long === null || (is_array($long) && count($long) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $long when calling reverseGeocodingPlacesGeocodingReverseGet'
            );
        }
        // verify the required parameter 'lat' is set
        if ($lat === null || (is_array($lat) && count($lat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lat when calling reverseGeocodingPlacesGeocodingReverseGet'
            );
        }

        $resourcePath = '/places/geocoding/reverse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $long,
            'long', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lat,
            'lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPlacesBySearchStringPlacesSearchPlacesStringGet
     *
     * Search Places By Search String
     *
     * @param  string $search_string search_string (optional, default to '')
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 25)
     * @param  string $sort_on sort_on (optional)
     * @param  bool $sort_desc sort_desc (optional, default to false)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Page|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function searchPlacesBySearchStringPlacesSearchPlacesStringGet($search_string = '', $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->searchPlacesBySearchStringPlacesSearchPlacesStringGetWithHttpInfo($search_string, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation searchPlacesBySearchStringPlacesSearchPlacesStringGetWithHttpInfo
     *
     * Search Places By Search String
     *
     * @param  string $search_string (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Page|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPlacesBySearchStringPlacesSearchPlacesStringGetWithHttpInfo($search_string = '', $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->searchPlacesBySearchStringPlacesSearchPlacesStringGetRequest($search_string, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Page' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Page' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Page', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Page';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Page',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPlacesBySearchStringPlacesSearchPlacesStringGetAsync
     *
     * Search Places By Search String
     *
     * @param  string $search_string (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPlacesBySearchStringPlacesSearchPlacesStringGetAsync($search_string = '', $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->searchPlacesBySearchStringPlacesSearchPlacesStringGetAsyncWithHttpInfo($search_string, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPlacesBySearchStringPlacesSearchPlacesStringGetAsyncWithHttpInfo
     *
     * Search Places By Search String
     *
     * @param  string $search_string (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPlacesBySearchStringPlacesSearchPlacesStringGetAsyncWithHttpInfo($search_string = '', $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\Page';
        $request = $this->searchPlacesBySearchStringPlacesSearchPlacesStringGetRequest($search_string, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPlacesBySearchStringPlacesSearchPlacesStringGet'
     *
     * @param  string $search_string (optional, default to '')
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchPlacesBySearchStringPlacesSearchPlacesStringGetRequest($search_string = '', $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {

        $resourcePath = '/places/search/places/string';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_string,
            'search_string', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_on,
            'sort_on', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_desc,
            'sort_desc', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPlacesPlacesPlacesGet
     *
     * Search Places
     *
     * @param  string $project_uuid project_uuid (optional)
     * @param  string $name name (optional)
     * @param  string $address_line_1 address_line_1 (optional)
     * @param  string $address_line_2 address_line_2 (optional)
     * @param  string $city city (optional)
     * @param  string $province_state province_state (optional)
     * @param  string $country country (optional)
     * @param  string $postal_zip_code postal_zip_code (optional)
     * @param  string $lat lat (optional)
     * @param  string $lng lng (optional)
     * @param  string $email email (optional)
     * @param  bool $is_public is_public (optional, default to true)
     * @param  bool $is_deleted is_deleted (optional, default to false)
     * @param  bool $with_company with_company (optional, default to false)
     * @param  bool $with_meta with_meta (optional, default to false)
     * @param  bool $with_catalog with_catalog (optional, default to false)
     * @param  bool $with_reviews with_reviews (optional, default to false)
     * @param  bool $with_schedule with_schedule (optional, default to false)
     * @param  bool $with_collection with_collection (optional, default to false)
     * @param  bool $with_blog with_blog (optional, default to false)
     * @param  bool $with_tags with_tags (optional, default to false)
     * @param  bool $with_categories with_categories (optional, default to false)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 25)
     * @param  string $sort_on sort_on (optional)
     * @param  bool $sort_desc sort_desc (optional, default to false)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Page|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function searchPlacesPlacesPlacesGet($project_uuid = null, $name = null, $address_line_1 = null, $address_line_2 = null, $city = null, $province_state = null, $country = null, $postal_zip_code = null, $lat = null, $lng = null, $email = null, $is_public = true, $is_deleted = false, $with_company = false, $with_meta = false, $with_catalog = false, $with_reviews = false, $with_schedule = false, $with_collection = false, $with_blog = false, $with_tags = false, $with_categories = false, $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->searchPlacesPlacesPlacesGetWithHttpInfo($project_uuid, $name, $address_line_1, $address_line_2, $city, $province_state, $country, $postal_zip_code, $lat, $lng, $email, $is_public, $is_deleted, $with_company, $with_meta, $with_catalog, $with_reviews, $with_schedule, $with_collection, $with_blog, $with_tags, $with_categories, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation searchPlacesPlacesPlacesGetWithHttpInfo
     *
     * Search Places
     *
     * @param  string $project_uuid (optional)
     * @param  string $name (optional)
     * @param  string $address_line_1 (optional)
     * @param  string $address_line_2 (optional)
     * @param  string $city (optional)
     * @param  string $province_state (optional)
     * @param  string $country (optional)
     * @param  string $postal_zip_code (optional)
     * @param  string $lat (optional)
     * @param  string $lng (optional)
     * @param  string $email (optional)
     * @param  bool $is_public (optional, default to true)
     * @param  bool $is_deleted (optional, default to false)
     * @param  bool $with_company (optional, default to false)
     * @param  bool $with_meta (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_collection (optional, default to false)
     * @param  bool $with_blog (optional, default to false)
     * @param  bool $with_tags (optional, default to false)
     * @param  bool $with_categories (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Page|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPlacesPlacesPlacesGetWithHttpInfo($project_uuid = null, $name = null, $address_line_1 = null, $address_line_2 = null, $city = null, $province_state = null, $country = null, $postal_zip_code = null, $lat = null, $lng = null, $email = null, $is_public = true, $is_deleted = false, $with_company = false, $with_meta = false, $with_catalog = false, $with_reviews = false, $with_schedule = false, $with_collection = false, $with_blog = false, $with_tags = false, $with_categories = false, $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->searchPlacesPlacesPlacesGetRequest($project_uuid, $name, $address_line_1, $address_line_2, $city, $province_state, $country, $postal_zip_code, $lat, $lng, $email, $is_public, $is_deleted, $with_company, $with_meta, $with_catalog, $with_reviews, $with_schedule, $with_collection, $with_blog, $with_tags, $with_categories, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Page' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Page' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Page', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Page';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Page',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPlacesPlacesPlacesGetAsync
     *
     * Search Places
     *
     * @param  string $project_uuid (optional)
     * @param  string $name (optional)
     * @param  string $address_line_1 (optional)
     * @param  string $address_line_2 (optional)
     * @param  string $city (optional)
     * @param  string $province_state (optional)
     * @param  string $country (optional)
     * @param  string $postal_zip_code (optional)
     * @param  string $lat (optional)
     * @param  string $lng (optional)
     * @param  string $email (optional)
     * @param  bool $is_public (optional, default to true)
     * @param  bool $is_deleted (optional, default to false)
     * @param  bool $with_company (optional, default to false)
     * @param  bool $with_meta (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_collection (optional, default to false)
     * @param  bool $with_blog (optional, default to false)
     * @param  bool $with_tags (optional, default to false)
     * @param  bool $with_categories (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPlacesPlacesPlacesGetAsync($project_uuid = null, $name = null, $address_line_1 = null, $address_line_2 = null, $city = null, $province_state = null, $country = null, $postal_zip_code = null, $lat = null, $lng = null, $email = null, $is_public = true, $is_deleted = false, $with_company = false, $with_meta = false, $with_catalog = false, $with_reviews = false, $with_schedule = false, $with_collection = false, $with_blog = false, $with_tags = false, $with_categories = false, $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->searchPlacesPlacesPlacesGetAsyncWithHttpInfo($project_uuid, $name, $address_line_1, $address_line_2, $city, $province_state, $country, $postal_zip_code, $lat, $lng, $email, $is_public, $is_deleted, $with_company, $with_meta, $with_catalog, $with_reviews, $with_schedule, $with_collection, $with_blog, $with_tags, $with_categories, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPlacesPlacesPlacesGetAsyncWithHttpInfo
     *
     * Search Places
     *
     * @param  string $project_uuid (optional)
     * @param  string $name (optional)
     * @param  string $address_line_1 (optional)
     * @param  string $address_line_2 (optional)
     * @param  string $city (optional)
     * @param  string $province_state (optional)
     * @param  string $country (optional)
     * @param  string $postal_zip_code (optional)
     * @param  string $lat (optional)
     * @param  string $lng (optional)
     * @param  string $email (optional)
     * @param  bool $is_public (optional, default to true)
     * @param  bool $is_deleted (optional, default to false)
     * @param  bool $with_company (optional, default to false)
     * @param  bool $with_meta (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_collection (optional, default to false)
     * @param  bool $with_blog (optional, default to false)
     * @param  bool $with_tags (optional, default to false)
     * @param  bool $with_categories (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPlacesPlacesPlacesGetAsyncWithHttpInfo($project_uuid = null, $name = null, $address_line_1 = null, $address_line_2 = null, $city = null, $province_state = null, $country = null, $postal_zip_code = null, $lat = null, $lng = null, $email = null, $is_public = true, $is_deleted = false, $with_company = false, $with_meta = false, $with_catalog = false, $with_reviews = false, $with_schedule = false, $with_collection = false, $with_blog = false, $with_tags = false, $with_categories = false, $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\Page';
        $request = $this->searchPlacesPlacesPlacesGetRequest($project_uuid, $name, $address_line_1, $address_line_2, $city, $province_state, $country, $postal_zip_code, $lat, $lng, $email, $is_public, $is_deleted, $with_company, $with_meta, $with_catalog, $with_reviews, $with_schedule, $with_collection, $with_blog, $with_tags, $with_categories, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPlacesPlacesPlacesGet'
     *
     * @param  string $project_uuid (optional)
     * @param  string $name (optional)
     * @param  string $address_line_1 (optional)
     * @param  string $address_line_2 (optional)
     * @param  string $city (optional)
     * @param  string $province_state (optional)
     * @param  string $country (optional)
     * @param  string $postal_zip_code (optional)
     * @param  string $lat (optional)
     * @param  string $lng (optional)
     * @param  string $email (optional)
     * @param  bool $is_public (optional, default to true)
     * @param  bool $is_deleted (optional, default to false)
     * @param  bool $with_company (optional, default to false)
     * @param  bool $with_meta (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_collection (optional, default to false)
     * @param  bool $with_blog (optional, default to false)
     * @param  bool $with_tags (optional, default to false)
     * @param  bool $with_categories (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchPlacesPlacesPlacesGetRequest($project_uuid = null, $name = null, $address_line_1 = null, $address_line_2 = null, $city = null, $province_state = null, $country = null, $postal_zip_code = null, $lat = null, $lng = null, $email = null, $is_public = true, $is_deleted = false, $with_company = false, $with_meta = false, $with_catalog = false, $with_reviews = false, $with_schedule = false, $with_collection = false, $with_blog = false, $with_tags = false, $with_categories = false, $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {

        $resourcePath = '/places/places';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $project_uuid,
            'project_uuid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address_line_1,
            'address_line_1', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address_line_2,
            'address_line_2', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $city,
            'city', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $province_state,
            'province_state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $postal_zip_code,
            'postal_zip_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lat,
            'lat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lng,
            'lng', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_public,
            'is_public', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_deleted,
            'is_deleted', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_company,
            'with_company', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_meta,
            'with_meta', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_catalog,
            'with_catalog', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_reviews,
            'with_reviews', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_schedule,
            'with_schedule', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_collection,
            'with_collection', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_blog,
            'with_blog', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_tags,
            'with_tags', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_categories,
            'with_categories', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_on,
            'sort_on', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_desc,
            'sort_desc', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePlacePlacesPlacesPlaceUuidPut
     *
     * Update Place
     *
     * @param  string $place_uuid place_uuid (required)
     * @param  \OpenAPI\Client\Model\PlaceBase $place_base place_base (required)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlaceResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function updatePlacePlacesPlacesPlaceUuidPut($place_uuid, $place_base, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->updatePlacePlacesPlacesPlaceUuidPutWithHttpInfo($place_uuid, $place_base, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation updatePlacePlacesPlacesPlaceUuidPutWithHttpInfo
     *
     * Update Place
     *
     * @param  string $place_uuid (required)
     * @param  \OpenAPI\Client\Model\PlaceBase $place_base (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlaceResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePlacePlacesPlacesPlaceUuidPutWithHttpInfo($place_uuid, $place_base, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->updatePlacePlacesPlacesPlaceUuidPutRequest($place_uuid, $place_base, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PlaceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlaceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlaceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PlaceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePlacePlacesPlacesPlaceUuidPutAsync
     *
     * Update Place
     *
     * @param  string $place_uuid (required)
     * @param  \OpenAPI\Client\Model\PlaceBase $place_base (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePlacePlacesPlacesPlaceUuidPutAsync($place_uuid, $place_base, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->updatePlacePlacesPlacesPlaceUuidPutAsyncWithHttpInfo($place_uuid, $place_base, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePlacePlacesPlacesPlaceUuidPutAsyncWithHttpInfo
     *
     * Update Place
     *
     * @param  string $place_uuid (required)
     * @param  \OpenAPI\Client\Model\PlaceBase $place_base (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePlacePlacesPlacesPlaceUuidPutAsyncWithHttpInfo($place_uuid, $place_base, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\PlaceResponse';
        $request = $this->updatePlacePlacesPlacesPlaceUuidPutRequest($place_uuid, $place_base, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePlacePlacesPlacesPlaceUuidPut'
     *
     * @param  string $place_uuid (required)
     * @param  \OpenAPI\Client\Model\PlaceBase $place_base (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePlacePlacesPlacesPlaceUuidPutRequest($place_uuid, $place_base, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        // verify the required parameter 'place_uuid' is set
        if ($place_uuid === null || (is_array($place_uuid) && count($place_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $place_uuid when calling updatePlacePlacesPlacesPlaceUuidPut'
            );
        }
        // verify the required parameter 'place_base' is set
        if ($place_base === null || (is_array($place_base) && count($place_base) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $place_base when calling updatePlacePlacesPlacesPlaceUuidPut'
            );
        }

        $resourcePath = '/places/places/{place_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }

        // path params
        if ($place_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'place_uuid' . '}',
                ObjectSerializer::toPathValue($place_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($place_base)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($place_base));
            } else {
                $httpBody = $place_base;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
