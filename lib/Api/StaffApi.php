<?php
/**
 * StaffApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eHelply SDK - 1.1.106
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.106
 * Contact: support@ehelply.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StaffApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StaffApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createStaff
     *
     * Createstaff
     *
     * @param  \OpenAPI\Client\Model\StaffCreate $staff_create staff_create (required)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\StaffDb|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function createStaff($staff_create, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->createStaffWithHttpInfo($staff_create, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation createStaffWithHttpInfo
     *
     * Createstaff
     *
     * @param  \OpenAPI\Client\Model\StaffCreate $staff_create (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StaffDb|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStaffWithHttpInfo($staff_create, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->createStaffRequest($staff_create, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\StaffDb' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\StaffDb' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\StaffDb', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\StaffDb';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StaffDb',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createStaffAsync
     *
     * Createstaff
     *
     * @param  \OpenAPI\Client\Model\StaffCreate $staff_create (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStaffAsync($staff_create, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->createStaffAsyncWithHttpInfo($staff_create, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createStaffAsyncWithHttpInfo
     *
     * Createstaff
     *
     * @param  \OpenAPI\Client\Model\StaffCreate $staff_create (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStaffAsyncWithHttpInfo($staff_create, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\StaffDb';
        $request = $this->createStaffRequest($staff_create, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createStaff'
     *
     * @param  \OpenAPI\Client\Model\StaffCreate $staff_create (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createStaffRequest($staff_create, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        // verify the required parameter 'staff_create' is set
        if ($staff_create === null || (is_array($staff_create) && count($staff_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staff_create when calling createStaff'
            );
        }

        $resourcePath = '/places/staff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($staff_create)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($staff_create));
            } else {
                $httpBody = $staff_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteStaff
     *
     * Deletestaff
     *
     * @param  string $staff_uuid staff_uuid (required)
     * @param  bool $soft_delete soft_delete (optional, default to true)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function deleteStaff($staff_uuid, $soft_delete = true, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->deleteStaffWithHttpInfo($staff_uuid, $soft_delete, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation deleteStaffWithHttpInfo
     *
     * Deletestaff
     *
     * @param  string $staff_uuid (required)
     * @param  bool $soft_delete (optional, default to true)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStaffWithHttpInfo($staff_uuid, $soft_delete = true, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->deleteStaffRequest($staff_uuid, $soft_delete, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStaffAsync
     *
     * Deletestaff
     *
     * @param  string $staff_uuid (required)
     * @param  bool $soft_delete (optional, default to true)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStaffAsync($staff_uuid, $soft_delete = true, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->deleteStaffAsyncWithHttpInfo($staff_uuid, $soft_delete, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteStaffAsyncWithHttpInfo
     *
     * Deletestaff
     *
     * @param  string $staff_uuid (required)
     * @param  bool $soft_delete (optional, default to true)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStaffAsyncWithHttpInfo($staff_uuid, $soft_delete = true, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = 'mixed';
        $request = $this->deleteStaffRequest($staff_uuid, $soft_delete, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStaff'
     *
     * @param  string $staff_uuid (required)
     * @param  bool $soft_delete (optional, default to true)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteStaffRequest($staff_uuid, $soft_delete = true, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        // verify the required parameter 'staff_uuid' is set
        if ($staff_uuid === null || (is_array($staff_uuid) && count($staff_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staff_uuid when calling deleteStaff'
            );
        }

        $resourcePath = '/places/staff/{staff_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $soft_delete,
            'soft_delete', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }

        // path params
        if ($staff_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'staff_uuid' . '}',
                ObjectSerializer::toPathValue($staff_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStaff
     *
     * Getstaff
     *
     * @param  string $staff_uuid staff_uuid (required)
     * @param  bool $with_places with_places (optional, default to false)
     * @param  bool $with_companies with_companies (optional, default to false)
     * @param  bool $with_catalog with_catalog (optional, default to false)
     * @param  bool $with_schedule with_schedule (optional, default to false)
     * @param  bool $with_roles with_roles (optional, default to false)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\StaffResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getStaff($staff_uuid, $with_places = false, $with_companies = false, $with_catalog = false, $with_schedule = false, $with_roles = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->getStaffWithHttpInfo($staff_uuid, $with_places, $with_companies, $with_catalog, $with_schedule, $with_roles, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation getStaffWithHttpInfo
     *
     * Getstaff
     *
     * @param  string $staff_uuid (required)
     * @param  bool $with_places (optional, default to false)
     * @param  bool $with_companies (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_roles (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StaffResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStaffWithHttpInfo($staff_uuid, $with_places = false, $with_companies = false, $with_catalog = false, $with_schedule = false, $with_roles = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->getStaffRequest($staff_uuid, $with_places, $with_companies, $with_catalog, $with_schedule, $with_roles, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\StaffResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\StaffResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\StaffResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\StaffResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StaffResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStaffAsync
     *
     * Getstaff
     *
     * @param  string $staff_uuid (required)
     * @param  bool $with_places (optional, default to false)
     * @param  bool $with_companies (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_roles (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStaffAsync($staff_uuid, $with_places = false, $with_companies = false, $with_catalog = false, $with_schedule = false, $with_roles = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->getStaffAsyncWithHttpInfo($staff_uuid, $with_places, $with_companies, $with_catalog, $with_schedule, $with_roles, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStaffAsyncWithHttpInfo
     *
     * Getstaff
     *
     * @param  string $staff_uuid (required)
     * @param  bool $with_places (optional, default to false)
     * @param  bool $with_companies (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_roles (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStaffAsyncWithHttpInfo($staff_uuid, $with_places = false, $with_companies = false, $with_catalog = false, $with_schedule = false, $with_roles = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\StaffResponse';
        $request = $this->getStaffRequest($staff_uuid, $with_places, $with_companies, $with_catalog, $with_schedule, $with_roles, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStaff'
     *
     * @param  string $staff_uuid (required)
     * @param  bool $with_places (optional, default to false)
     * @param  bool $with_companies (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_roles (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStaffRequest($staff_uuid, $with_places = false, $with_companies = false, $with_catalog = false, $with_schedule = false, $with_roles = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        // verify the required parameter 'staff_uuid' is set
        if ($staff_uuid === null || (is_array($staff_uuid) && count($staff_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staff_uuid when calling getStaff'
            );
        }

        $resourcePath = '/places/staff/{staff_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_places,
            'with_places', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_companies,
            'with_companies', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_catalog,
            'with_catalog', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_schedule,
            'with_schedule', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_roles,
            'with_roles', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }

        // path params
        if ($staff_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'staff_uuid' . '}',
                ObjectSerializer::toPathValue($staff_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchStaff
     *
     * Searchstaff
     *
     * @param  string $project_uuid project_uuid (optional)
     * @param  string $first_name first_name (optional)
     * @param  string $last_name last_name (optional)
     * @param  bool $is_deleted is_deleted (optional, default to false)
     * @param  bool $with_companies with_companies (optional, default to false)
     * @param  bool $with_places with_places (optional, default to false)
     * @param  bool $with_schedule with_schedule (optional, default to false)
     * @param  bool $with_catalog with_catalog (optional, default to false)
     * @param  bool $with_reviews with_reviews (optional, default to false)
     * @param  bool $with_roles with_roles (optional, default to false)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 25)
     * @param  string $sort_on sort_on (optional)
     * @param  bool $sort_desc sort_desc (optional, default to false)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Page|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function searchStaff($project_uuid = null, $first_name = null, $last_name = null, $is_deleted = false, $with_companies = false, $with_places = false, $with_schedule = false, $with_catalog = false, $with_reviews = false, $with_roles = false, $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->searchStaffWithHttpInfo($project_uuid, $first_name, $last_name, $is_deleted, $with_companies, $with_places, $with_schedule, $with_catalog, $with_reviews, $with_roles, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation searchStaffWithHttpInfo
     *
     * Searchstaff
     *
     * @param  string $project_uuid (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  bool $is_deleted (optional, default to false)
     * @param  bool $with_companies (optional, default to false)
     * @param  bool $with_places (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_roles (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Page|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchStaffWithHttpInfo($project_uuid = null, $first_name = null, $last_name = null, $is_deleted = false, $with_companies = false, $with_places = false, $with_schedule = false, $with_catalog = false, $with_reviews = false, $with_roles = false, $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->searchStaffRequest($project_uuid, $first_name, $last_name, $is_deleted, $with_companies, $with_places, $with_schedule, $with_catalog, $with_reviews, $with_roles, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Page' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Page' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Page', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Page';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Page',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchStaffAsync
     *
     * Searchstaff
     *
     * @param  string $project_uuid (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  bool $is_deleted (optional, default to false)
     * @param  bool $with_companies (optional, default to false)
     * @param  bool $with_places (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_roles (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchStaffAsync($project_uuid = null, $first_name = null, $last_name = null, $is_deleted = false, $with_companies = false, $with_places = false, $with_schedule = false, $with_catalog = false, $with_reviews = false, $with_roles = false, $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->searchStaffAsyncWithHttpInfo($project_uuid, $first_name, $last_name, $is_deleted, $with_companies, $with_places, $with_schedule, $with_catalog, $with_reviews, $with_roles, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchStaffAsyncWithHttpInfo
     *
     * Searchstaff
     *
     * @param  string $project_uuid (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  bool $is_deleted (optional, default to false)
     * @param  bool $with_companies (optional, default to false)
     * @param  bool $with_places (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_roles (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchStaffAsyncWithHttpInfo($project_uuid = null, $first_name = null, $last_name = null, $is_deleted = false, $with_companies = false, $with_places = false, $with_schedule = false, $with_catalog = false, $with_reviews = false, $with_roles = false, $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\Page';
        $request = $this->searchStaffRequest($project_uuid, $first_name, $last_name, $is_deleted, $with_companies, $with_places, $with_schedule, $with_catalog, $with_reviews, $with_roles, $page, $page_size, $sort_on, $sort_desc, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchStaff'
     *
     * @param  string $project_uuid (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  bool $is_deleted (optional, default to false)
     * @param  bool $with_companies (optional, default to false)
     * @param  bool $with_places (optional, default to false)
     * @param  bool $with_schedule (optional, default to false)
     * @param  bool $with_catalog (optional, default to false)
     * @param  bool $with_reviews (optional, default to false)
     * @param  bool $with_roles (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 25)
     * @param  string $sort_on (optional)
     * @param  bool $sort_desc (optional, default to false)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchStaffRequest($project_uuid = null, $first_name = null, $last_name = null, $is_deleted = false, $with_companies = false, $with_places = false, $with_schedule = false, $with_catalog = false, $with_reviews = false, $with_roles = false, $page = 1, $page_size = 25, $sort_on = null, $sort_desc = false, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {

        $resourcePath = '/places/staff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $project_uuid,
            'project_uuid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name,
            'first_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name,
            'last_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_deleted,
            'is_deleted', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_companies,
            'with_companies', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_places,
            'with_places', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_schedule,
            'with_schedule', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_catalog,
            'with_catalog', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_reviews,
            'with_reviews', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_roles,
            'with_roles', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_on,
            'sort_on', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_desc,
            'sort_desc', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateStaff
     *
     * Updatestaff
     *
     * @param  string $staff_uuid staff_uuid (required)
     * @param  \OpenAPI\Client\Model\StaffCreate $staff_create staff_create (required)
     * @param  string $x_access_token x_access_token (optional)
     * @param  string $x_secret_token x_secret_token (optional)
     * @param  string $authorization authorization (optional)
     * @param  string $ehelply_active_participant ehelply_active_participant (optional)
     * @param  string $ehelply_project ehelply_project (optional)
     * @param  string $ehelply_data ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\StaffResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function updateStaff($staff_uuid, $staff_create, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        list($response) = $this->updateStaffWithHttpInfo($staff_uuid, $staff_create, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);
        return $response;
    }

    /**
     * Operation updateStaffWithHttpInfo
     *
     * Updatestaff
     *
     * @param  string $staff_uuid (required)
     * @param  \OpenAPI\Client\Model\StaffCreate $staff_create (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StaffResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateStaffWithHttpInfo($staff_uuid, $staff_create, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $request = $this->updateStaffRequest($staff_uuid, $staff_create, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\StaffResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\StaffResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\StaffResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\StaffResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StaffResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateStaffAsync
     *
     * Updatestaff
     *
     * @param  string $staff_uuid (required)
     * @param  \OpenAPI\Client\Model\StaffCreate $staff_create (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStaffAsync($staff_uuid, $staff_create, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        return $this->updateStaffAsyncWithHttpInfo($staff_uuid, $staff_create, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateStaffAsyncWithHttpInfo
     *
     * Updatestaff
     *
     * @param  string $staff_uuid (required)
     * @param  \OpenAPI\Client\Model\StaffCreate $staff_create (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStaffAsyncWithHttpInfo($staff_uuid, $staff_create, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        $returnType = '\OpenAPI\Client\Model\StaffResponse';
        $request = $this->updateStaffRequest($staff_uuid, $staff_create, $x_access_token, $x_secret_token, $authorization, $ehelply_active_participant, $ehelply_project, $ehelply_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateStaff'
     *
     * @param  string $staff_uuid (required)
     * @param  \OpenAPI\Client\Model\StaffCreate $staff_create (required)
     * @param  string $x_access_token (optional)
     * @param  string $x_secret_token (optional)
     * @param  string $authorization (optional)
     * @param  string $ehelply_active_participant (optional)
     * @param  string $ehelply_project (optional)
     * @param  string $ehelply_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateStaffRequest($staff_uuid, $staff_create, $x_access_token = null, $x_secret_token = null, $authorization = null, $ehelply_active_participant = null, $ehelply_project = null, $ehelply_data = null)
    {
        // verify the required parameter 'staff_uuid' is set
        if ($staff_uuid === null || (is_array($staff_uuid) && count($staff_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staff_uuid when calling updateStaff'
            );
        }
        // verify the required parameter 'staff_create' is set
        if ($staff_create === null || (is_array($staff_create) && count($staff_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staff_create when calling updateStaff'
            );
        }

        $resourcePath = '/places/staff/{staff_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_access_token !== null) {
            $headerParams['x-access-token'] = ObjectSerializer::toHeaderValue($x_access_token);
        }
        // header params
        if ($x_secret_token !== null) {
            $headerParams['x-secret-token'] = ObjectSerializer::toHeaderValue($x_secret_token);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($ehelply_active_participant !== null) {
            $headerParams['ehelply-active-participant'] = ObjectSerializer::toHeaderValue($ehelply_active_participant);
        }
        // header params
        if ($ehelply_project !== null) {
            $headerParams['ehelply-project'] = ObjectSerializer::toHeaderValue($ehelply_project);
        }
        // header params
        if ($ehelply_data !== null) {
            $headerParams['ehelply-data'] = ObjectSerializer::toHeaderValue($ehelply_data);
        }

        // path params
        if ($staff_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'staff_uuid' . '}',
                ObjectSerializer::toPathValue($staff_uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($staff_create)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($staff_create));
            } else {
                $httpBody = $staff_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
